<!DOCTYPE HTML>
<html>
<head>
<style>
 .all{
  width: 100vw;
  height: 90vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.lose-overlay{
  text-align: center;
  display: flex;
  position: absolute;
  background-color: black;
  color: white;
  flex-wrap: wrap;
  justify-content: center;
  border-radius: 50%;
  opacity: 0.9;
  align-items: center;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  z-index: 9;
}
.choice{
  display: flex;
  cursor: pointer;
  border: none;
  font-size: 9.5vw;
  opacity: 0.9;
  background-color: transparent;
  color: white;
}

.innerCircle{
  flex-wrap: wrap;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  height: 30vw;
  width: 30vw;
  border-radius: 50%;
  background-color: black;
  z-index: 3;
  margin-top: 2vw;
}

#title{
  width: 100%;
  text-align: center;
  font-size: 10vw;
}

.simon{
  margin-top: 4vw;
  display: flex;
  flex-wrap: wrap;
  position: absolute;
  border-radius: 50%;
  border: 1px solid black;
  height: 60vw;
  width: 60vw;
  background-color: black;
  justify-content: space-evenly;
  align-items: center;
}
#title{
  font-size: 7vw;
}
.colors{
  border: 1px solid black;
  width: 46%;
  height: 46%;
  margin: auto;
  opacity: 0.75;
  cursor: pointer;
  }

#blue:active, #green:active, #yellow:active, #red:active{
  opacity: 1;
}
#blue.active, #green.active, #yellow.active, #red.active{
  opacity: 1;
}

button:focus{
  outline: 0;
}

.colors-topleft{
  border-radius: 100% 0 0 0;
  background-color: green;
}
.colors-topright{
  border-radius: 0 100% 0 0;
  background-color: red;
}
.colors-botright{
  border-radius: 0 0 100% 0;
  background-color: blue;
}
.colors-botleft{
  border-radius: 0 0 0 100%;
  background-color: yellow;
}

@media screen and (min-width: 1050px){
  .simon{
    width: 60vw;
    height: 60vw;
  }
  .innerCircle{
    width: 30vw;
    height: 30vw;
  }
  .colors{
    width: 46%;
    height: 46%;
  }
}

@media screen and (max-width: 850px){
  .all{
    align-items: center;
  }
  .simon{
    width: 90vw;
    height: 90vw;
  }
  .innerCircle{
    width: 45vw;
    height: 45vw;
  }
  .colors{
    width: 46%;
    height: 46%;
  }
  #title{
    font-size: 11vw;
  }
  
}

</style>
</head>
<body>
 <div class = 'all'>
<div class = 'simon' id = 'simon'>  
  <div class = "lose-overlay" id = "lose-overlay">
    <button class = 'try-again choice' id = 'try-again'>Try-again?</button>
    <button class = 'start-over choice' id = 'start-over'>Start Over</button>
  </div>
  <button class = 'colors colors-topleft' id = "green"></button>
  <button class = 'colors colors-topright' id = "red"></button>
  <button class = 'colors colors-botleft' id = "yellow"></button>
  <button class = 'colors colors-botright' id = "blue"></button>
 
</div>
  <div class = 'innerCircle' id = 'innerCircle'>
    <div class = 'innerCircleItem' id = 'title'>SIMON</div>
    <div class = 'innerCircleItem' id = 'counter'>#</div>
    <button class = 'btn innerCircleItem' id = 'start'>start</button>
    <button class = 'btn innerCircleItem' id = 'strict'>strict</button>
    <div class = 'innerCircleItem' id = 'on/off'>On</div>
      
  </div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script>
var colorArray = ["green", "blue", "yellow", "red"];
var computerArray = [];
var playerArray = [];
var turn;
var counter;
var loopX = 0;
var done;
var time = 1000;
var repeat; 
var strict;

$(".lose-overlay").hide();

$("#strict").on("click touchend", function(){
  if (computerArray.length < 2){
    if (strict == true){
      strict = false;
    }
    else{
      strict = true;
    }
  }
  else {
    return;
  }
  console.log('strict:', strict);
})

$(".try-again").on("click touchend", function(){
  $(".lose-overlay").hide();
  console.log("doing things");
  turn = 'player'
  repeat = true;
  loopX = 0;
  playerArray = [];
  arrayLoop(computerArray);
  
})

$(".start-over").on('click touchend', function(){
  $(".lose-overlay").hide();
  start();
})

$(".colors").on("click touchstart", function(){
  //Almost a recursion occurring! 
  //add sound to each color.
  if (turn == "player"){
    addColor(this.id, playerArray);
    console.log("playerArray after push:", playerArray);
    console.log('player:', playerArray, 'computer', computerArray);
    if (playerArray.length == computerArray.length){
    for (var x in playerArray){
      if (playerArray[x] !== computerArray[x]){
        console.log('Input overlay with you lost & try again/start over?');
        $('.lose-overlay').show();
        if (strict == true){
        $('.try-again').hide();
        }
        else {
          $(".try-again").show();
        }
        //If try again: run through colors again and allow for choosing.
        //Try again function that resets playerArray, turn = 'player', does loopArray(thisArray) without computerTurn() at the end. Could add if statement for try again variable in loopArray that prevents computerTurn() from running?
        //If start over, maybe remake button function into actual function called 'start'? and run that. Reset parameters and do computerTurn();
        return;
      }
    }
      turn = 'computer';
      repeat = false;
      console.log('going to computer');
      setTimeout(function(){
        computerTurn();
      },time)
    }
  }
})

function addColor(colorId, arr){
  arr.push(colorId);
}

function activate(colorId){
  $("#" + colorId).addClass("active").delay(time).queue(function(){
    $("#" + colorId).removeClass("active").dequeue()});
}

function arrayLoop(arr){
  setTimeout(function(){
    console.log('in arrayLoop');
    var color = arr[loopX];
    activate(color);
    loopX++;
    console.log('x:', loopX);
    if (loopX < arr.length){
      arrayLoop(arr);
    }
    else {
      if (repeat == true){
        return;
      }
      computerColor(arr);
      return;
    }
  },time + 500);
}



function computerColor(arr){
  console.log('in computerColor');
  var random = Math.floor(Math.random() * Math.floor(colorArray.length))
    addColor(colorArray[random], arr);
    console.log(arr);
    var color = colorArray[random];
    console.log('time:', time);
    setTimeout(function(){
    activate(color);
    turn = "player";
    playerArray = [];
    },time + 500)
  console.log('leaving computercolor()');
}




function computerTurn(){
  //Will need to make this compiled each turn. Maintain first press is always the same color once first round goes, i.e. [red], [red, blue], [red, blue, blue]. And be able to go through array to show each color every round. Will need to use for loop to "press" each button in the sequence, then use the function to add another color to that array. Each time it's the player's turn, start the array over?
  counter += 1;
  console.log('counter:', counter);
  $("#counter").text(counter);
  
  if (counter > 1){
    loopX = 0;
    arrayLoop(computerArray);
  }
  //Will need to make new function that includes adding the new color and activating it. Within that function have the activate function using promise.then (https://stackoverflow.com/questions/21518381/proper-way-to-wait-for-one-function-to-finish-before-continuing).
    else{
      computerColor(computerArray);
    }
}

function start(){
  repeat;
  playerArray = [];
  computerArray = [];
  counter = 0;
  computerTurn();
}

$('#start').on('click touchend', function(){
  start();
})



</script>
</body>
</html>
